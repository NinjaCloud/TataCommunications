https://github.com/NinjaCloud/k8s-prac.git

Deployment
Task 1: Write a Deployment YAML and Apply it

vi dep-nginx.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dep-nginx
  name: dep-nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: dep-nginx
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: dep-nginx
    spec:
      containers:
      - image: nginx:1.11
        name: nginx
        ports:
        - containerPort: 80


kubectl apply -f dep-nginx.yaml
kubectl get deployments
kubectl get rs
kubectl get pods

kubectl exec -it <replace pod_name> -- /bin/bash
nginx -v
exit

Task 2: Update the Deployment with a newer image

kubectl set image deployment/nginx-dep nginx-ctr=nginx --record
kubectl describe deployments
kubectl get pods

kubectl exec -it <replace pod_name> -- /bin/bash
nginx -v
exit

Task 3: Rollback of Deployment 

kubectl rollout history deployment/nginx-dep
kubectl rollout undo deployment/nginx-dep --to-revision=1
kubectl get pods

kubectl exec -it <replace pod_name> -- /bin/bash
nginx -v
exit

Task 4: Scaling of Deployments

kubectl get deployments
kubectl get pods

kubectl scale deployment nginx-dep --replicas=8
kubectl get deployments
kubectl get pods

kubectl scale deployment nginx-dep --replicas=2
kubectl get deployments
kubectl get pods

kubectl delete -f dep-nginx.yaml






Lab 4: DaemonSet in Kubernetes

vi daemonset.yaml

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: example-daemonset
  labels:
    app: example
spec:
  selector:
    matchLabels:
      app: example
  template:
    metadata:
      labels:
        app: example
    spec:
      containers:
        - name: example-container
          image: nginx:latest
          ports:
            - containerPort: 80


kubectl apply -f ds-pod.yaml
kubectl get ds fluent-ds
kubectl get pods -o wide
kubectl delete -f ds-pod.yaml


Lab 5: Dyanmic Provisioning

vi pv-claim.yaml

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: dynamic-claim
spec:
  storageClassName: default
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi


kubectl create -f dynamic-claim.yaml

vi dynamic-pod.yaml

kind: Pod
apiVersion: v1
metadata:
  name: dynamic-pod
spec:
  volumes:
    - name: dynamic-storage
      persistentVolumeClaim:
       claimName: dynamic-claim
  containers:
    - name: dynamic-container
      image: nginx
      ports:
        - containerPort: 80
          name: "http-server"
      volumeMounts:
        - mountPath: "/usr/share/nginx/html"
          name: dynamic-storage


kubectl create -f dynamic-pod.yaml
kubectl get pods

kubectl exec -it dynamic-pod bash
# lsblk

kubectl delete -f dynamic-pod.yaml
kubectl delete -f dynamic-claim.yaml 



Lab 6: StatefulSet Implementation
Task 1:  Creating a StatefulSet

vi nginx-sts.yaml

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web
spec:
  selector:
    matchLabels:
      app: nginx # has to match .spec.template.metadata.labels
  serviceName: "nginx"
  replicas: 3 # by default is 1
  template:
    metadata:
      labels:
        app: nginx # has to match .spec.selector.matchLabels
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: nginx
        image: k8s.gcr.io/nginx-slim:0.8
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html
  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "standard"
      resources:
        requests:
          storage: 1Gi

vi nginx-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  ports:
  - port: 80
    name: web
  clusterIP: None
  selector:
    app: nginx


kubectl apply -f nginx-sts.yaml

kubectl get service nginx-svc 
kubectl get statefulset nginx-sts
kubectl get pods -w -l app=nginx-sts

for i in 0 1; do kubectl exec "nginx-sts-$i" -- sh -c 'hostname'; done

kubectl run -i --tty --image busybox:1.28 dns-test --restart=Never --rm

nslookup nginx-sts-0.nginx-svc
nslookup nginx-sts-1.nginx-svc

exit

kubectl delete pod -l app=nginx-sts
kubectl get pod -w -l app=nginx-sts

for i in 0 1; do kubectl exec "nginx-sts-$i" -- sh -c 'hostname'; done

Task 2: Writing to a Scalable Storage

kubectl get pvc -l app=nginx-sts

for i in 0 1; do kubectl exec "nginx-sts-$i" -- sh -c 'echo "$(hostname)" > /usr/share/nginx/html/index.html'; done

for i in 0 1; do kubectl exec -i -t "nginx-sts-$i" -- curl http://localhost/; done

Task 3: Scaling StatefulSet

kubectl scale sts nginx-sts --replicas=5
kubectl get pods -w -l app=nginx-sts

kubectl get pods -l app=nginx-sts
kubectl get pvc -l app=nginx-sts

kubectl edit sts nginx-sts

# Set spec: replicas to 3, Press Esc and :wq! to exit vi

kubectl get pods -w -l app=nginx-sts
kubectl get pvc -l app=nginx-sts

Task 4: Rolling Update

kubectl edit sts nginx-sts

# Change the spec: conatiners: image value to nginx:latest, Press Esc and :wq! to exit vi

kubectl get pod -l app=nginx-sts -w
kubectl get pods
kubectl describe pod nginx-sts-0 | grep Image
kubectl delete -f nginx-sts.yaml





Feedback :
https://www.metricsthatmatter.com/url/u.aspx?04E28F621200808645

Post Assessment Test:
https://forms.office.com/r/D35WAkaGdJ



